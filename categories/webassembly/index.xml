<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebAssembly on Very Good Graphics Blog</title><link>https://blog.verygoodgraphics.com/categories/webassembly/</link><description>Recent content in WebAssembly on Very Good Graphics Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>VeryGoodGraphics</copyright><lastBuildDate>Thu, 29 Sep 2022 15:36:14 +0800</lastBuildDate><atom:link href="https://blog.verygoodgraphics.com/categories/webassembly/index.xml" rel="self" type="application/rss+xml"/><item><title>Compile C++ into WebAssembly</title><link>https://blog.verygoodgraphics.com/posts/cpp-wasm/</link><pubDate>Thu, 29 Sep 2022 15:36:14 +0800</pubDate><guid>https://blog.verygoodgraphics.com/posts/cpp-wasm/</guid><description>&lt;p>The support for WebAssembly (abbreviated Wasm) is a critical part of the VGG engine. Due to performance and cross-platform support considerations, the VGG engine is written in C++. It could be compiled into WebAssembly, so that we are able to run it in browsers. More importantly, it also supports user-generated Wasm files to be plugged into the designs.&lt;/p>
&lt;p>By definition,&lt;/p>
&lt;blockquote>
&lt;p>WebAssembly is an executable binary format for a stack-based virtual machine.&lt;/p>
&lt;/blockquote>
&lt;p>There have been plenty of previous work, including blog posts, papers, books, etc, that help us understand the WebAssembly format. However, few of them focus on the compiling process of C++ to WebAssembly.&lt;/p>
&lt;p>In this post, we share the process of using &lt;a href="https://emscripten.org/">Emscripten&lt;/a>, a &lt;em>de-facto&lt;/em> compiler toolchain for WebAssembly, to compile C++ code into WebAssembly. Hope you enjoy it!&lt;/p></description></item></channel></rss>