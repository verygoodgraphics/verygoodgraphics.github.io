<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Very Good Graphics Blog</title><link>https://blog.verygoodgraphics.com/</link><description>Recent content on Very Good Graphics Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>VeryGoodGraphics</copyright><lastBuildDate>Thu, 29 Sep 2022 15:36:14 +0800</lastBuildDate><atom:link href="https://blog.verygoodgraphics.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Digging into Compiling C++ to WebAssembly</title><link>https://blog.verygoodgraphics.com/posts/cpp-wasm/</link><pubDate>Thu, 29 Sep 2022 15:36:14 +0800</pubDate><guid>https://blog.verygoodgraphics.com/posts/cpp-wasm/</guid><description>&lt;p>The support of WebAssembly is a critical part of VGG engine, as we&lt;/p>
&lt;ul>
&lt;li>not only compile the whole engine to WebAssembly for running in browsers;&lt;/li>
&lt;li>but also support user-generated wasm file in combination with designs to make a whole interactive app&lt;/li>
&lt;/ul>
&lt;p>By definition,&lt;/p>
&lt;blockquote>
&lt;p>WebAssembly is an executable binary format for a stack-based virtual machine.&lt;/p>
&lt;/blockquote>
&lt;p>and there have been so many blog posts, papers, and books help us disect the WebAssembly format. However, seldom articles talk about the compiling process of C++ programs to WebAssembly. Because there is a &lt;em>de-facto&lt;/em> tool called &lt;a href="https://emscripten.org/">Emscripten&lt;/a> which is devoted to this problem.&lt;/p>
&lt;p>And nobody seems to have interest in the underlying mechanism of Emscripten.&lt;/p>
&lt;p>In this article, we kept the record for digging into the compiling process from C++ to WebAssembly, thus demystifying Emscripten. Hope you enjoy it!&lt;/p>
&lt;h2 id="background-of-webassembly">Background of WebAssembly&lt;/h2>
&lt;p>Let&amp;rsquo;s start the story from JVM&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, the most famous virtual machine in programming history. JVM-based languages is a collection of languages which obey the JVM specification, including Java, Clojure, Scala and Kotlin, so that they can run on JVM without cross-platform issues, while getting the power of JVM including GC&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>, exception handling, multithreading, atomic operands, etc.&lt;/p>
&lt;p>WebAssembly format actually borrows a lot from the JVM specification. Some details can be peeked in the paper &lt;em>Bringing the Web up to Speed with WebAssembly&lt;/em>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>. The authors also implemented a virtual machine to execute the WebAssembly format. As long as a programming language could be compiled to WebAssembly, it can be executed in this WebAssembly virtual machine. This is exactly what JVM does.&lt;/p>
&lt;p>WebAssembly is designed for speeding up the Web. For example, we can use Photoshop in the browser. The ability of WebAssembly is greatly extended. It could help build portable standards for embedded devices, so that we can narrow the gap between embedded hardware and software. As a consequence, more devlopers using high-level programming language are able to deploy their products on tiny embedded hardware. It is the last puzzle of making everything intelligentization.&lt;/p>
&lt;p>Besides, the blockchain community is paying more attention to WebAssembly. For example, Ethereum executes contracts in its own virtual machine called EVM&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>. These contracts are written by Solidity language, a derivative programming language from Go. Developers cannot port the contracts to other chain unless it also supports EVM. What will happen if we use WebAssembly as the virtual machine format? Developers can write contracts in any programming language, then compile them to WebAssembly format. The contract is portable to any chains which support WebAssembly virtual machine. And it is the next virtual machine generation for most newer blockchain projects. We believe it will be the future for DeFi infrastructure.&lt;/p>
&lt;p>Rust and C++, the two programming languages, are the primarily supported languages for WebAssembly generation. WebAssembly has the same linear memory model and reference table design as the C++ language. And the compiling to WebAssembly binaries is supported by &lt;strong>Clang&lt;/strong>, which contains the WebAssembly target for LLVM&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> framework. Clang is the C++ compiler constructed with modules from LLVM. It focuses on translating C++ languages to LLVM IR&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup> and then uses some toolkits to generate executable binary files for the target platform.&lt;/p>
&lt;p>To use the WebAssembly technology, we need to generate a wasm file and then execute it in the target environment. Generating a wasm file includes two steps, compiling and linking, which is the same as the C++ building process. Then the wasm file can be adapted with JavaScript and run in a browser, or just run in standalone runtime as an normal native process.&lt;/p>
&lt;h2 id="preparation">Preparation&lt;/h2>
&lt;p>It&amp;rsquo;s very convenient to set up a C++ WebAssembly building environment with &lt;code>emsdk&lt;/code>, which help us collect all the toolkits for compiling WebAssembly.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/emscripten-core/emsdk.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>After downloading &lt;code>emsdk&lt;/code>, we will get all the tools under directory &lt;code>upstream&lt;/code>. We can check the installation by the command:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The &lt;code>clang&lt;/code> executable is downloaded directly from official LLVM releases, unmodified. If we want to build LLVM, we can follow the instructions from &lt;a href="https://github.com/llvm/llvm-project/blob/main/llvm/utils/release/test-release.sh">&lt;code>test_release.sh&lt;/code>&lt;/a>.&lt;/p>
&lt;p>Please note, &lt;code>upstream/cache/sysroot&lt;/code> is a very important directory. It contains the header and library files for the subsequent compiling and linking.&lt;/p>
&lt;h2 id="compile-c-to-webassembly-with-clang">Compile C++ to WebAssembly with Clang&lt;/h2>
&lt;p>It is not easy to be a master at compiling C++ programs because the compiler has thousands of options to control the compiling and linking process. As a curious developer, we can debug the LLVM and clang source code to understand how it works. Let&amp;rsquo;s start from the famous &lt;code>hello world&lt;/code> program.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here we include the header file of &lt;code>stdio.h&lt;/code>, which is contained in the C language library &lt;code>libc&lt;/code>. Emscripten uses &lt;code>musl&lt;/code> library and &lt;code>libc&lt;/code> library customized for &lt;code>wasi&lt;/code> environment, and copys the &lt;code>libcxx&lt;/code>, &lt;code>libcxxabi&lt;/code>, &lt;code>libunwind&lt;/code> from LLVM, which are used to support the C++ language features.&lt;/p>
&lt;p>To show how to compile the program, we splits the progress into four stages: preprocessing, generating LLVM IR, generating assembly target object file, and linking.&lt;/p>
&lt;h3 id="preprocessing">Preprocessing&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang --target&lt;span class="o">=&lt;/span>wasm32 -E hello.c -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>--target=wasm32&lt;/code> defines the wasm32 target&lt;/li>
&lt;li>&lt;code>-E&lt;/code> indicates that we only run preprocessing of the &lt;code>hello.c&lt;/code> file.&lt;/li>
&lt;li>&lt;code>-v&lt;/code> will print the details of the execution process.&lt;/li>
&lt;/ul>
&lt;p>In the end, we will encounter the error&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">hello.c:1:10: fatal error: &amp;#39;stdio.h&amp;#39; file not found
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include &amp;lt;stdio.h&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>It is about the missing header file &lt;code>stdio.h&lt;/code>. C++ defines all function interfaces in header files. In the preprocessing step, the compiler will search the directories to find the header files. Here we are using the clang from &lt;code>emsdk&lt;/code>. So it can not find the correct header file. And we notice that the current header search directories only includes:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ignoring nonexistent directory &amp;#34;/include&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include &amp;#34;...&amp;#34; search starts here:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include &amp;lt;...&amp;gt; search starts here:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /path/to/emsdk/upstream/lib/clang/15.0.0/include
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Then we can add &lt;code>-I&lt;/code> to append header search directory to resolve the problem. As usual we can add the system header include directory. But the system integrated headers and libraries are not adapted for WebAssembly. Emscripten offers all the basic headers and libraries required to build the wasm file. We can use the &lt;code>--sysroot=/path/to/emscripten/cache/sysroot&lt;/code> instead.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang --target&lt;span class="o">=&lt;/span>wasm32 --sysroot /path/to/emsdk/upstream/emscripten/cache/sysroot -E hello.c -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>--sysroot&lt;/code> is only required with option &lt;code>--target=wasm32&lt;/code>. So we can not use it in the normal C++ compilation process, otherwise it fails.&lt;/p>
&lt;h3 id="llvm-intermediate-presentation-ir">LLVM Intermediate Presentation (IR)&lt;/h3>
&lt;p>It is the most important design in LLVM, that any languages compiled to IR format, could reuse the target platform code generation and assembling, with lots of optimization libraries. So WebAssembly is derived from the IR format and other LLVM-based programming languages could also easily be transformed to WebAssembly format.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang --target&lt;span class="o">=&lt;/span>wasm32 -I /path/to/emsdk/upstream/emscripten/cache/sysroot/include -emit-llvm -S hello.c -o hello.ll -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-I&lt;/code> is used to prepend header search directories&lt;/li>
&lt;li>&lt;code>-S&lt;/code> indicates to generate LLVM assembly file&lt;/li>
&lt;li>&lt;code>-emit-llvm&lt;/code> will produce the LLVM intermediate representation&lt;/li>
&lt;li>&lt;code>-o hello.ll&lt;/code> the &lt;code>.ll&lt;/code> file format is the text format of IR&lt;/li>
&lt;/ul>
&lt;p>Besides, to understand how the optimization process works, we can add &lt;code>-O1&lt;/code>or &lt;code>-O2&lt;/code> and check the output. If we run the command without &lt;code>-emit-llvm&lt;/code>, we can get a pure assembly format text file.&lt;/p>
&lt;p>As to Emscripten, we find it adapts some header files to support WebAssembly. The wasm file is executed in a virtual machine. Currently the WebAssembly instruction set does not support some system devices and kernel interfaces. So Emscripten needs to replace these functions when compiling.&lt;/p>
&lt;h3 id="target-object-file">Target Object File&lt;/h3>
&lt;p>In this stage, the clang will use the LLVM IR to generate target platform object files. So LLVM will handle all the following work to construct an executable binary file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang --target&lt;span class="o">=&lt;/span>wasm32 -I /path/to/emsdk/upstream/emscripten/cache/sysroot/include -c hello.c -o hello.o -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-c&lt;/code> option will produce the target compiled object file.&lt;/li>
&lt;/ul>
&lt;p>It produces the &lt;code>hello.o&lt;/code> binary file, which linker could resolve the symbols with and does some optimization work in the linking stage.&lt;/p>
&lt;h3 id="linking">Linking&lt;/h3>
&lt;p>Let&amp;rsquo;s run compiling and linking by separate command tools. Clang only chains the tools to complete building the executable target file. To show the linking progress, we only need to use the tool &lt;code>wasm-ld&lt;/code>, instead of &lt;code>ld&lt;/code>. More details could be found in &lt;a href="https://github.com/llvm/llvm-project/blob/main/clang/tools/driver/driver.cpp">driver.cpp&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/wasm-ld -o hello.wasm hello.o -L/path/to/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten -lc -lcompiler_rt --no-entry
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>wasm-ld&lt;/code> is the wasm linker in clang tools.&lt;/li>
&lt;li>&lt;code>-o hello.wasm&lt;/code> indicates that the output is a wasm file.&lt;/li>
&lt;li>&lt;code>hello.o&lt;/code> is the compiled object file.&lt;/li>
&lt;li>&lt;code>-L...&lt;/code> prepends the object library search directory in the linking stage.&lt;/li>
&lt;li>&lt;code>-lc&lt;/code> and &lt;code>-lcompiler_rt&lt;/code> are used to add &lt;code>libc&lt;/code> and &lt;code>compiler_rt&lt;/code> library to linker when resolving symbols.&lt;/li>
&lt;li>&lt;code>--no-entry&lt;/code> is used to avoid &lt;code>entry symbol not defined _start&lt;/code> error.&lt;/li>
&lt;/ul>
&lt;p>If we look into the wasm file, we will find it has some Emscripten symbols inside.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">wasm2wat hello.wasm -o hello.wat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where &lt;code>wasm2wat&lt;/code> is a tool one of &lt;a href="https://github.com/WebAssembly/wabt">Wabt&lt;/a> toolkits, which is used for transforming a wasm binary file to a human readable text format file.&lt;/p>
&lt;h2 id="compile-c-to-webassembly-with-emscripten">Compile C++ to WebAssembly with Emscripten&lt;/h2>
&lt;p>In last chapter, we have compiled C++ programs to WebAssembly with clang toolchains. Actually, Emscripten helps organize the &lt;strong>driver process&lt;/strong> to generate WebAssembly files, with a python tool called &lt;code>emcc.py&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/emscripten/emcc.py -o hello.wasm hello.c -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>the parameter &lt;code>-o hello.wasm&lt;/code> is very important as it will not generate the JavaScript glue codes.&lt;/p>
&lt;p>We record the commands in &lt;code>emcc&lt;/code>, as it shows the best practice for compiling WebAssembly with Emscripten toolchains. By following the python debugger, we find the &lt;code>emcc&lt;/code> tool split the whole process into three main phases: &lt;code>phase_compile_inputs&lt;/code>, &lt;code>phase_link&lt;/code>, &lt;code>phase_post_link&lt;/code>.&lt;/p>
&lt;p>The compile command in &lt;code>emcc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/path/to/emsdk/upstream/bin/clang
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -target wasm32-unknown-emscripten
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DEMSCRIPTEN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -D__EMSCRIPTEN_major__=3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -D__EMSCRIPTEN_minor__=1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -D__EMSCRIPTEN_tiny__=10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -fignore-exceptions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -fvisibility=default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -combiner-global-alias-analysis=false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -enable-emscripten-sjlj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -disable-lsr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -Werror=implicit-function-declaration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -Xclang -iwithsysroot/include/SDL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --sysroot=/path/to/emsdk/upstream/emscripten/cache/sysroot
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -Xclang -iwithsysroot/include/compat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> hello.c -c -o hello.o
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The link command in &lt;code>emcc&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/path/to/emsdk/upstream/bin/wasm-ld -o he.wasm hello.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -L/path/to/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /path/to/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten/crt1.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -lGL -lal -lhtml5 -lstandalonewasm -lstubs-debug -lc-debug -ldlmalloc -lcompiler_rt -lc++-noexcept -lc++abi-noexcept -lsockets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -combiner-global-alias-analysis=false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -enable-emscripten-sjlj
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -mllvm -disable-lsr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --import-undefined
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --strip-debug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export-if-defined=__start_em_asm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export-if-defined=__stop_em_asm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=emscripten_stack_get_end
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=emscripten_stack_get_free
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=emscripten_stack_get_base
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=emscripten_stack_init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=stackSave
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=stackRestore
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=stackAlloc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export=__errno_location
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --export-table
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -z stack-size=5242880
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --initial-memory=16777216
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --max-memory=16777216
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --global-base=1024
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Apparently, &lt;code>emcc&lt;/code> has done a lot of optimization work in the compiling and linking process.&lt;/p>
&lt;h3 id="binaryen---the-post-link-phase">Binaryen - the post link phase&lt;/h3>
&lt;p>Binaryen is another optimization tool integrated in Emscripten. It will extract the wasm binary file into a new AST (Abstract Syntax Tree), rather than the wasm plain stack format. Then this AST helps optimize the wasm file further in &lt;code>-O3&lt;/code> level.&lt;/p>
&lt;p>Binaryen will not be launched unless &lt;code>-O3&lt;/code> parameter is passed to the &lt;code>emcc&lt;/code>.&lt;/p>
&lt;h3 id="webassembly-api-with-emscripten">WebAssembly API with Emscripten&lt;/h3>
&lt;p>The Emscripten documents have no update with the usage of WebAssembly API in JavaScript. Instead, it posts the solution with &lt;code>cwrap&lt;/code> and &lt;code>ccall&lt;/code> from &lt;code>Module&lt;/code>. Apparently, it is easier and more convenient to use the &lt;code>WebAssembly API&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s create a &lt;code>math.c&lt;/code> file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">consoleLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">alloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">consoleLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In &lt;code>math.c&lt;/code> we define an external function &lt;code>consoleLog&lt;/code> which is imported from JavaScript, an &lt;code>alloc&lt;/code> function used to do memory allocation and a &lt;code>factorial&lt;/code> function to test the operations. Then let&amp;rsquo;s build the wasm file.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/clang --target&lt;span class="o">=&lt;/span>wasm32 -c -o math.o -I /path/to/emsdk/upstream/emscripten/cache/sysroot/include math.c -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And in the linking step, we make use of the full command from &lt;code>Emscripten&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ /path/to/emsdk/upstream/bin/wasm-ld -o math.wasm math.o -L/path/to/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten /path/to/emsdk/upstream/emscripten/cache/sysroot/lib/wasm32-emscripten/crt1_reactor.o -lGL -lal -lhtml5 -lstandalonewasm -lstubs-debug -lnoexit -lc-debug -ldlmalloc -lcompiler_rt -lc++-noexcept -lc++abi-noexcept -lsockets -mllvm -combiner-global-alias-analysis&lt;span class="o">=&lt;/span>&lt;span class="nb">false&lt;/span> -mllvm -enable-emscripten-sjlj -mllvm -disable-lsr --import-undefined --strip-debug --export-if-defined&lt;span class="o">=&lt;/span>factorial --export-if-defined&lt;span class="o">=&lt;/span>alloc --export-if-defined&lt;span class="o">=&lt;/span>__start_em_asm --export-if-defined&lt;span class="o">=&lt;/span>__stop_em_asm --export-if-defined&lt;span class="o">=&lt;/span>emscripten_stack_get_end --export-if-defined&lt;span class="o">=&lt;/span>emscripten_stack_get_free --export-if-defined&lt;span class="o">=&lt;/span>emscripten_stack_get_base --export-if-defined&lt;span class="o">=&lt;/span>emscripten_stack_init --export-if-defined&lt;span class="o">=&lt;/span>stackSave --export-if-defined&lt;span class="o">=&lt;/span>stackRestore --export-if-defined&lt;span class="o">=&lt;/span>stackAlloc --export-if-defined&lt;span class="o">=&lt;/span>__errno_location --export-table -z stack-size&lt;span class="o">=&lt;/span>&lt;span class="m">5242880&lt;/span> --initial-memory&lt;span class="o">=&lt;/span>&lt;span class="m">16777216&lt;/span> --entry&lt;span class="o">=&lt;/span>_initialize --max-memory&lt;span class="o">=&lt;/span>&lt;span class="m">16777216&lt;/span> --global-base&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Using the option &lt;code>--export-all&lt;/code> will make the linker import function &lt;code>wasi_snapshot_preview1&lt;/code>, which leads to errors in JavaScript. So do not use the option in production.&lt;/p>
&lt;p>Instead, we can use the &lt;code>emcc&lt;/code> command directly to complete the whole building process.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ emcc math.c --no-entry -sEXPORTED_FUNCTIONS&lt;span class="o">=&lt;/span>_factorial,_alloc -sERROR_ON_UNDEFINED_SYMBOLS&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> -o math-v2.wasm -O3 -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>-O3&lt;/code> will use &lt;code>wasm-opt&lt;/code> to optimize the wasm file, which is a tool from &lt;code>binaryen&lt;/code>&lt;/li>
&lt;li>&lt;code>-sEXPORTED_FUNCTIONS=_factorial,_alloc&lt;/code> makes the &lt;code>wasm-ld&lt;/code> add &lt;code>--export-if-defined=factorial&lt;/code> and &lt;code>--export-if-defined=alloc&lt;/code>&lt;/li>
&lt;li>&lt;code>-sERROR_ON_UNDEFINED_SYMBOLS=0&lt;/code> is used to avoid the &lt;code>node&lt;/code> &lt;code>compiler.js&lt;/code> processing bug in &lt;code>emcc&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Then we add the following code in a file &lt;code>index.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Title&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fetch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;math-v1.wasm&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">arrayBuffer&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bytes&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">WebAssembly&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instantiate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bytes&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">env&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">consoleLog&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">alloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">memory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">Int32Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">memory&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">memory&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ptr = %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instance&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">factorial&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;result: %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">result&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Open the &lt;code>index.html&lt;/code> in chrome and we can get the output in the console.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ptr = 5244424
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">108
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1944
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">209952
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">408146688
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">result: 408146688
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this article, we reviewed how the &lt;code>emcc&lt;/code> script works and extracted the &lt;code>clang&lt;/code> commands. Then by using the WebAssembly API, we can easily integrate the packaged wasm file with the front-end JavaScript code. Thanks to the &lt;code>LLVM&lt;/code> and &lt;code>WebAssembly&lt;/code> text format, which helps a lot in the whole debugging process. And we post some suggestions on developing C/C++ with WebAssembly.&lt;/p>
&lt;p>The &lt;code>emcc&lt;/code> is a helpful tool for compiling C++ to wasm, but it&amp;rsquo;s complicated to understand both &lt;code>emcc&lt;/code> and &lt;code>clang&lt;/code> options.
It&amp;rsquo;s better to avoid to use Emscripten to generate JavaScript glue codes. Instead we can map all the interfaces in a Module with WebAssembly Module API.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Short for Java-Virtual-Machine&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Short for Garbage-Collection&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>&lt;a href="https://dl.acm.org/doi/10.1145/3062341.3062363">https://dl.acm.org/doi/10.1145/3062341.3062363&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Short for Ethereum-Virtual-Machine&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Short for Low-Level-Virtual-Machine&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>Short for Intermediate-Representation&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>ECS Architecture for GUI applications</title><link>https://blog.verygoodgraphics.com/posts/ecs/</link><pubDate>Wed, 14 Sep 2022 21:28:17 +0800</pubDate><guid>https://blog.verygoodgraphics.com/posts/ecs/</guid><description>&lt;p>ECS, short for Entity-Component-System, is an architectural design pattern originally found in the video game programming. It is a powerful technique that allows easing the programming headaches as well as boosting the performance of a game containing huge amount of interactive objects.&lt;/p>
&lt;p>That&amp;rsquo;s why the VGG engine takes ECS as the fundamental architecture, because VGG targets for high performance in the very beginning. However, VGG is more about making interactive applications, particularly the GUI applications. &lt;a name="initial-problem">&lt;/a>&lt;strong>Would the ECS architecture still be suitable for such a task?&lt;/strong> Let&amp;rsquo;s dive a little deeper.&lt;/p>
&lt;h2 id="the-essence-of-ecs">The Essence of ECS&lt;/h2>
&lt;p>Let&amp;rsquo;s first talk about ECS. There are already many descriptions of ECS around the internet so we just skip the rigorous but to give a one-sentence definition.&lt;/p>
&lt;blockquote>
&lt;p>ECS is about entities&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;em>composed&lt;/em> of difference types of component whose data are manipulated by one or more systems.&lt;/p>
&lt;/blockquote>
&lt;p>And the essence of ECS is &lt;em>composition&lt;/em>, with obvious advantages over the &lt;em>inheritance&lt;/em> in Object-Oriented-Programming.&lt;/p>
&lt;p>In OOP, inheritance is one of three principles, the other two being &lt;em>encapulation&lt;/em> and &lt;em>polymorphism&lt;/em>. Inheritance is regarded as a technique for reusing data and functions, for example, as mountain bike is a kind of bike, the &lt;code>MountainBike&lt;/code> class shall inherit all the data of the &lt;code>Bike&lt;/code> class as follows&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">Bike&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Vehicle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Frame&lt;/span> &lt;span class="n">frame&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Brake&lt;/span> &lt;span class="n">brake&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Saddle&lt;/span> &lt;span class="n">saddle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Wheel&lt;/span> &lt;span class="n">wheels&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">MountainBike&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Bike&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Gear&lt;/span> &lt;span class="n">frontGear&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Gear&lt;/span> &lt;span class="n">rearGear&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And when an instance is created out of &lt;code>MountainBike&lt;/code> type, this instance will have all the data in &lt;code>Bike&lt;/code> type plus all that of its ancestors. In this way, the data together with member functions can be reused in derived types or instances.&lt;/p>
&lt;p>However, this leads to many headaches, just to name a few&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Overhead of virtual functions&lt;/strong>: extra runtime cost of virtual table and virtual pointers, let alone some unexpected overriding pitfalls&lt;/li>
&lt;li>&lt;strong>Diamond problem in multiple inheritance&lt;/strong>: ambiguous overridden data and functions from multiple ancestors&lt;/li>
&lt;li>&lt;strong>Dynamic type castings&lt;/strong>: performance bottleneck of &lt;code>dynamic_cast&lt;/code> for casting base pointer to derived pointer&lt;/li>
&lt;li>&lt;strong>Complex inheritance chains&lt;/strong>: in order to model for real-world problems, complex inheritance relationships has to be designed which would look daunting for new commers&lt;/li>
&lt;/ul>
&lt;p>And the developer needs to know the &lt;a href="https://www.oreilly.com/library/view/inside-the-c/0201834545/">Object-Model&lt;/a> well to write memory-safe and performant C++ code, and sometimes he needs to resort to exotic programming idoms such as CRTP&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> or SFINAE&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> for even better performance.&lt;/p>
&lt;p>The complexity disappears when we use composition with ECS architecture. If we want to create a new class for &lt;code>MountainBike&lt;/code>, we needn&amp;rsquo;t to inherit from &lt;code>Bike&lt;/code>, but only needs to describe the unique data fileds a mountain bike will have. When we need an entity for a mountain bike, we could push both instances of &lt;code>BikeComponent&lt;/code> and &lt;code>MountainBikeComponent&lt;/code> into the entity, which are renamed from &lt;code>Bike&lt;/code> and &lt;code>MountainBike&lt;/code> respectively without inheritance relationship.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">make_entity&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BikeComponent&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Frame&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">brake&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Brake&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">saddle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Saddle&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">wheels&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">Wheel&lt;/span>&lt;span class="p">{},&lt;/span> &lt;span class="n">Wheel&lt;/span>&lt;span class="p">{}&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">MountainBikeComponent&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">frontGear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gear&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">rearGear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Gear&lt;/span>&lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>And even more components can be pushed into an entity, each of them describes a specific feature that could be freely added to or removed from an entity. As long as proper memory layout is configured for those components for the sake of cache miss ratio reduction, the performance can be quite good.&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/p>
&lt;p>As to systems, which can be as simple as a function, would manipulate those data accordingly. It is exactly what Niklaus Wirth proposed,&lt;/p>
&lt;blockquote>
&lt;p>Programs = Data Structures + Algorithm&lt;/p>
&lt;/blockquote>
&lt;p>where components represents data structures and systems represents algorithm. The programming suddenly becomes easier and clearer since there are no more traps hiding bebind various advanced concepts, to be more specific, no more extra runtime cost due to how the compiler implements inheritance, and no more ambiguity issue due to multiple inheritance.&lt;/p>
&lt;p>As a matter of fact, ECS is a bit like &lt;a href="https://en.wikipedia.org/wiki/Trait_(computer_programming)">Trait&lt;/a>, since trait contains a set of functions, and both of them emphasize the concept of composition. However, a trait class cannot have member data, whereas a component could be more than a POD&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup> type. All in all, ECS is an architectural design pattern, having no hard-constraints on programming, so&lt;/p>
&lt;ul>
&lt;li>A component type is free to have inheritance relationships with another component type;&lt;/li>
&lt;li>A component type is also free to have both data and member functions&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>.&lt;/li>
&lt;/ul>
&lt;h2 id="the-essence-of-gui">The Essence of GUI&lt;/h2>
&lt;p>We already have a rough impression of ECS, and now it&amp;rsquo;s time for discussing GUI. But let&amp;rsquo;s start from a game. A game may consist of many entities, including rivers, mountains, players, NPCs, monsters, etc. These entities usually have no relationships, or more specifically, no hierarchical relationships. In contrast, a GUI is essentially a tree of entities, where hierarchy must be imposed.&lt;/p>
&lt;link rel="stylesheet" href="https://blog.verygoodgraphics.com/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject"
style="max-width:50%" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="https://blog.verygoodgraphics.com/images/simple-dialog.png" />
&lt;/div>
&lt;a href="https://blog.verygoodgraphics.com/images/simple-dialog.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>As you can see, the simple dialog above can be divided into three parts: title, content and the button group. The button group contains another two buttons. So the tree looks like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Dialog
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Title
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── Content
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── Button Group
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── Cancel Button
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── OK Button
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>where the title and content are instances of text widget&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>, button group is of layout widget, and buttons are of button widget. If we see each widget an entity, these widgets comprise a hierarchical entity tree.&lt;/p>
&lt;p>So the &lt;a href="#initial-problem">initial problem&lt;/a> becomes, would the ECS architecture be suitable for modeling such a hierarchical system?&lt;/p>
&lt;p>And from another aspect of view, would it be an overkill to use ECS architecture for GUI applications? Since ECS architecture could process up to millions of entities, do we really need to process such a magnitude of entities in even most complex GUI like the following example?&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject"
style="max-width:100%" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="https://blog.verygoodgraphics.com/images/maya.png" />
&lt;/div>
&lt;a href="https://blog.verygoodgraphics.com/images/maya.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>We&amp;rsquo;ll figure out the answers in the next chapter.&lt;/p>
&lt;h2 id="ecs-for-gui">ECS for GUI&lt;/h2>
&lt;p>As we have mentioned in the first chapter, the data are defined by the components and the systems will update the data constantly during the whole execution lifetime. This leds to an interesting question, how does the system find the appropriate data? The answer is through, in our definition, queries.&lt;/p>
&lt;p>Different ECS libraries have huge discrepancy with respect to the implementation details, like how the components are organized in memory and so as with the query implementation. But this won&amp;rsquo;t stop up dividing the queries into two different semantic types, horizontal query and vertical query.&lt;/p>
&lt;h3 id="horizontal-query">Horizontal Query&lt;/h3>
&lt;p>Let&amp;rsquo;s have a look at the adapted code snippets from the moust famous C++ ECS framework &lt;a href="https://github.com/skypjack/entt">&lt;code>EnTT&lt;/code>&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">update&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entt&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">registry&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">registry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">view&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">registry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">view&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">position&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">velocity&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// use a callback
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="p">([](&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vel&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// use a range-for
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">vel&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">each&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// use forward iterators and get only the components of interest
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="nl">entity&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vel&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">view&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">velocity&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entity&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above code, the &lt;code>update&lt;/code> is a simple system, which developer could utilize to update the entity position based on its current velocity. The system at first queries all entities that have both component of &lt;code>position&lt;/code> and &lt;code>velocity&lt;/code>, save the result in a view, and then iterate over each entity for the updating.&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject"
style="max-width:100%" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="https://blog.verygoodgraphics.com/images/ecs-query.png" />
&lt;/div>
&lt;a href="https://blog.verygoodgraphics.com/images/ecs-query.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>If we visualize this process, we will find out that the query is &lt;strong>horizontal&lt;/strong>. It doesn&amp;rsquo;t matter whether there is a hierachy or not because of possibly flattened storage and indirection of the relationship.&lt;/p>
&lt;p>Horizontal queries are common in video game programming, but also exist in GUI applications. Let&amp;rsquo;s have a look at the following example.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;entity-a&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;entity&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;position-component&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;velocity-component&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;entity-b&amp;#34;&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;entity&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;position-component&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;velocity-component&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If we use CSS selector &lt;code>.position-component&lt;/code>, we will get an array of &lt;code>div&lt;/code>s whose class is &lt;code>position-component&lt;/code>. The embedded hierarchy won&amp;rsquo;t affect the final result.&lt;/p>
&lt;p>Say, if we want to mimic the CSS selector behavior during GUI programming, we can just take advantage of the horizontal query ability of ECS, which means ECS at least suits this particular use case.&lt;/p>
&lt;h3 id="vertical-query">Vertical Query&lt;/h3>
&lt;p>Compared to horizontal query, vertical query focus on querying &lt;em>entities&lt;/em>, rather than &lt;em>components&lt;/em>. So vertical query cares about a specific &lt;em>named&lt;/em> entity, looking into the internals and finding all the components of it.&lt;/p>
&lt;p>Let&amp;rsquo;s still take the dialog example for discussion. In order to start iterating through the entity tree, we need to find the root entity, namely the &lt;code>dialog entity&lt;/code> in this example. After that, we search for what components this entity has, or which children it holds, then possibly recurring into each of children for further investigations.&lt;/p>
&lt;p>Here comes an interesting question. How do we model the hierarchy relationship between entities?&lt;/p>
&lt;p>There are mainly two methods,&lt;/p>
&lt;ul>
&lt;li>We could hardcode the relationship into the entity data structure; or&lt;/li>
&lt;li>We could implement a relationship component which is hot-pluggable into an entity.&lt;/li>
&lt;/ul>
&lt;p>Each of the two methods works, but most mature ECS libraries, including &lt;a href="https://skypjack.github.io/2019-06-25-ecs-baf-part-4/">EnTT&lt;/a> and &lt;a href="https://ajmmertens.medium.com/building-games-in-ecs-with-entity-relationships-657275ba2c6c">flecs&lt;/a>, prefer the latter, so does VGG engine.&lt;/p>
&lt;p>The most important advantage is the dynamic ability to add or remove a relationship, compared to the hardcoded method. Because sometimes we need more than one tree hierarchy during the whole lifetime. Take chromium engine for &lt;a href="https://developer.chrome.com/articles/renderingng-architecture/#architecture-components">instance&lt;/a>, during the rasterization pipeline, we need at least three trees, including DOM tree, layout tree and the property tree, which could be peeked in the following figure from their offical blog.&lt;/p>
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject"
style="max-width:80%" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="https://blog.verygoodgraphics.com/images/chrome-pipeline.avif" />
&lt;/div>
&lt;a href="https://blog.verygoodgraphics.com/images/chrome-pipeline.avif" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>A single node entity could be reused across multiple trees, as long as multiple relationship component is added into the entity, which is exactly what ECS excels at.&lt;/p>
&lt;h3 id="event-mechanism">Event Mechanism&lt;/h3>
&lt;p>In &lt;em>interactive&lt;/em> GUI applications, how the architecture handles interactions is quite important, which is what we call the event mechanism. The &lt;em>signal&lt;/em> concept, taken equally as the &lt;em>event&lt;/em> concept, would be just called event in our context.&lt;/p>
&lt;p>Strictly speaking, the event mechanism should not be part of ECS architecture, but as it plays an important role in interactive apps and games so good support of it is common in ECS frameworks. For example, the EnTT library proposed &lt;a href="https://skypjack.github.io/entt/md_docs_md_signal.html">four distinct concepts&lt;/a> for the entire event mechanism, namely the delegate, the signal, the dispatcher and the emitter.&lt;/p>
&lt;p>We won&amp;rsquo;t bother those abstract concepts but just describe what we expected in such a framework&lt;/p>
&lt;ul>
&lt;li>The ability to define various types of events, including
&lt;ul>
&lt;li>The inner events, which are system-generated events like the creation and destruction of an entity, as well as the addition and the deletion of a component from an entity&lt;/li>
&lt;li>The outer events, which are user-generated events like mice and keyboards events, plus user-defined events which could be freely sent from one entity to another&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The ability to send events to multiple entities, like broadcasting or multicasting messages in a network, and possibly across different threads or processes.&lt;/li>
&lt;li>The ability to respond to those events, using pre-registered callbacks for each type of event, which itself could be dynamically added or removed
&lt;ul>
&lt;li>The responding process, a.k.a. invoking callbacks, should be asynchronous, which means it won&amp;rsquo;t make GUI unresponsible. Note this is orthgonal to multi-threading since even single thread is capable of parellel computing using technique like coroutine.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>The ability to queue, delay, filter, even compose events for more complicated behaviors&lt;/li>
&lt;/ul>
&lt;p>More descriptions are welcome but the above abilities should be sufficient for a simple GUI framework.&lt;/p>
&lt;p>Let&amp;rsquo;s look into a famous non-ECS GUI framework, Qt. Qt uses a &lt;a href="https://doc.qt.io/qt-6/signalsandslots.html">signal-slot mechanism&lt;/a> as its core event machanism, which could be summarized as follows&lt;/p>
&lt;ul>
&lt;li>All object should be inherited from &lt;code>QObject&lt;/code> in order to use signal-slot mechanism&lt;/li>
&lt;li>A meta-compiler is needed to transform signal-slot related code into normal C++ code&lt;/li>
&lt;li>Signal and slot is of many-to-many relationship, which are connected by &lt;code>connect&lt;/code> function. The executing of slot function could happen in another thread depending on &lt;a href="https://doc.qt.io/qt-6/qt.html#ConnectionType-enum">connection type&lt;/a>&lt;/li>
&lt;li>The exchanged data are defined by the arguments of signal and slot functions, which are type-checked by the meta-object system&lt;/li>
&lt;/ul>
&lt;p>We can find out that except for advanced ability like event composing, Qt&amp;rsquo;s signal-slot mechanism loosely conforms to our expectations.&lt;/p>
&lt;p>As to ECS-based GUI framework, we could claim that those expectations should be satisfied more easily due to its flexibility, for example, we do not need a meta-compiler and singular inheritance. The data could be exchanged with a POD-style component across entities as well. We will leave it to implementation details or possibly another blog post in the future.&lt;/p>
&lt;h3 id="summary-of-ecs-for-gui">Summary of ECS for GUI&lt;/h3>
&lt;p>We have already discussed several use cases and come to an conclusion that ECS could be even a better solution than traditional OOP-based solution for the GUI programming problems.&lt;/p>
&lt;p>And also please remember, VGG is utilizing designs as the base of a GUI. A common design would have up to 10-40k layers, even 250k layers.&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> This places a huge performance challenge so we think ECS is just right here to rescue.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this article, we have discussed the essence of ECS architecture and GUI, and elaborated several use cases of ECS in GUI programming. This is a very big and deep topic so it is impossible to cover everything in a single post, for instance, we haven&amp;rsquo;t mentioned concrete implementation details of such an ECS architecture specialized for GUI programming.&lt;/p>
&lt;p>There are many good ECS implementations around the internet, for example&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/skypjack/entt">EnTT&lt;/a> is implemented with a custom &lt;a href="https://github.com/skypjack/entt/blob/master/src/entt/entity/sparse_set.hpp">sparse-set&lt;/a> data structure.&lt;/li>
&lt;li>&lt;a href="https://github.com/SanderMertens/flecs">flecs&lt;/a> is implemented with a traditional &lt;a href="https://ajmmertens.medium.com/building-an-ecs-2-archetypes-and-vectorization-fe21690805f9">archtype&lt;/a> method, where the addition and deletion of component could be a theoretical performance bottleneck in common scenarios.&lt;/li>
&lt;li>&lt;a href="https://github.com/amzeratul/halley">halley&lt;/a> engine, which is a game engine successfully shipped a game called &lt;a href="https://store.steampowered.com/app/607050/_/">Wargroove&lt;/a>, implements a &lt;a href="https://github.com/amzeratul/halley/tree/develop/src/engine/entity/include/halley/entity">custom&lt;/a> ECS architecture&lt;/li>
&lt;/ul>
&lt;p>VGG engine does not use a baked ECS framework like EnTT or flecs but to choose to implement one on our own, just like what halley has done. This is because we believe a tailered version better suits for our use cases, particularly for programming GUI applications. Currently VGG implements a simple ECS architecture which still lacks some features, but the inner iteration is happening. If you like the concept of &lt;a href="https://blog.verygoodgraphics.com/posts/intro-vgg/">Design-as-Code&lt;/a> as well as the ECS architecture, you can keep an eye on our &lt;a href="https://github.com/verygoodgraphics/vgg_runtime">open-sourced&lt;/a> version.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>An entity can be as simple as an ID, or as complex as a universal container. It doesn&amp;rsquo;t matter, as long as it has the semantics of putting components together, where real data live in.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>CRTP stands for Curiously-Recurring-Template-Pattern&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>SFINAE stands for Substitution-Failure-Is-Not-An-Error&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>As a matter of fact, most ECS-based systems do careful memory layout configuration to improve performance, like &lt;a href="https://github.com/amzeratul/halley/blob/develop/src/engine/entity/include/halley/entity/entity.h#L154">this&lt;/a>&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>POD stands for Plain-Old-Data-structure&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>Usually systems account for such functions, but it doesn&amp;rsquo;t matter if a component type has some small or inline functions.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>In Web programming, specifically React-based web programming, we have another &lt;em>component&lt;/em> concept, which actually means reusable GUI widgets. To distinguish from our &lt;em>component&lt;/em> concept in ECS, we just call this reusable GUI component &lt;strong>widget&lt;/strong>.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>From this &lt;a href="https://news.ycombinator.com/item?id=33013123">discussion&lt;/a> on Hacker News&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item><item><title>Introducing VGG and Design-as-Code</title><link>https://blog.verygoodgraphics.com/posts/intro-vgg/</link><pubDate>Thu, 12 May 2022 17:38:17 +0800</pubDate><guid>https://blog.verygoodgraphics.com/posts/intro-vgg/</guid><description>&lt;p>VGG is yet another engine and framework for making interactive apps, which emphasizes the concept of &lt;em>Design-as-Code&lt;/em> at its core. And it may hopefully unite the worlds of design and code at last.&lt;/p>
&lt;p>Meanwhile, the whole world is about using Web technologies, platform-specific frameworks, or cross-platform frameworks, to make apps, the most famous and innovative among them being &lt;a href="https://flutter.dev/">Flutter&lt;/a>, which takes advantage of underlying parts of browser engine to achieve the goal of &amp;ldquo;Write Once, Run Anywhere&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>So why do we need another engine or framework? That&amp;rsquo;s what we need to explain about Design-as-Code, but let&amp;rsquo;s look at other choices first.&lt;/p>
&lt;h2 id="the-web-technologies">The Web Technologies&lt;/h2>
&lt;p>Writing HTML&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> &lt;a href="https://rogovoy.me/blog/writing-html-sucks">sucks&lt;/a>.&lt;/p>
&lt;p>It is very interesting. Because HTML, short for &lt;code>Hyper Text Markup Language&lt;/code>, was originally invented thirty years ago for making &lt;strong>linkable&lt;/strong> documents, rather than apps. It is more about &lt;strong>markup&lt;/strong> than a language. The majority doesn&amp;rsquo;t even take writing HTML as programming, since it is not a programming language at all.&lt;/p>
&lt;p>It was not until the advent of HTML5, which is commonly referred to as &lt;strong>H5&lt;/strong>, together with CSS3 and modern versions of JavaScript, that people were starting to make &lt;strong>real&lt;/strong> Web apps.&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>&lt;/p>
&lt;p>And thanks to the optimization team of browser vendors, nowadays the performance of JavaScript gains the magnitude-level improvements so that the &lt;strong>interactive&lt;/strong> web apps won&amp;rsquo;t be bottle-necked.&lt;/p>
&lt;link rel="stylesheet" href="https://blog.verygoodgraphics.com/css/hugo-easy-gallery.css" />
&lt;div class="box">
&lt;figure itemprop="associatedMedia"
itemscope itemtype="http://schema.org/ImageObject"
style="max-width:50%" >
&lt;div class="img">
&lt;img itemprop="thumbnail" src="https://blog.verygoodgraphics.com/images/js-perf-his.png" />
&lt;/div>
&lt;a href="https://blog.verygoodgraphics.com/images/js-perf-his.png" itemprop="contentUrl">&lt;/a>
&lt;/figure>
&lt;/div>
&lt;p>Do you remember this famous picture? It&amp;rsquo;s from &lt;a href="https://hacks.mozilla.org/2017/02/a-cartoon-intro-to-webassembly/">Lin Clark&lt;/a> when she tries to introduce the performance history of JavaScript. The performance started to boost from 2008 and is still not reaching the end.&lt;/p>
&lt;p>The benefit is great for app end-users, however, writing HTML still sucks for coders.&lt;/p>
&lt;p>When we have so-called Front-end Frameworks, such as React, Vue, Angular and etc, and is overwhelmed by the booming of front-end ecosystems&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>, we still need to write &lt;strong>HTML-like&lt;/strong> code and tweak styles carefully with CSS or one of its variants.&lt;/p>
&lt;p>It&amp;rsquo;s slow and boring.&lt;/p>
&lt;p>Tens of thousands of greatest minds are wasted on implementing those visual interfaces, using a technology stack that was not originally intended for. Those tasks are not limited to tweaking styles back-and-forth, as well as thinking about browser compatibility issues, weird CSS hacks, performance caveats and so on.&lt;/p>
&lt;p>And No-Code &lt;a href="https://rogovoy.me/blog/writing-html-sucks">doesn&amp;rsquo;t help&lt;/a> either. Anyway, seldom No-Code products are solving problems for coders.&lt;/p>
&lt;p>We may ask ourselves, why are we still sticking to HTML and CSS, and using sophisticated tools from over-grown NPM ecosystem to create apps, which is less efficient and more irritating?&lt;/p>
&lt;h2 id="other-non-web-frameworks">Other Non-Web Frameworks&lt;/h2>
&lt;p>Because there is no other better ways.&lt;/p>
&lt;p>Electron, though well-known and having a proven application like VSCode, would be first ruled out from the list, since it is actually still a Web-based solution, thus we don&amp;rsquo;t even need to talk about its performance issues.&lt;/p>
&lt;p>What else do we have?&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Some are platform-specific frameworks since the beginning of golden ages, like MFC for Windows, Cocoa for macOS, and GTK for UNIX/Linux. And others are modern mobile toolkits like those specifically made for iOS, Android, or other mobile operating systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The cross-platform frameworks, notably the widely-adopted Qt Framework. But it is mainly used for non-mobile/non-web environments. The &lt;em>cross-platform&lt;/em> here means crossing desktop OS initially, while endeavour is still being put into mobile/web targets for those frameworks.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Upcoming brand-new solutions like Flutter, which is a mobile-first cross-platform framework, and is promising for web and desktop as well.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>As the ratio of web apps is increasing over the years, the platform-specific or cross-platform frameworks mentioned above are less used since they are often targeting traditional desktop applications.&lt;/p>
&lt;p>And the developer experience is even worse than writing HTML because they may be obliged to write &lt;em>imperative&lt;/em> and &lt;em>object-oriented&lt;/em> code like this&lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>,&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">var count = 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">let stack = new VStack
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">let text = new Text(&amp;#34;Count: \(count)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stack.add_child(text)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">let button = new Button(&amp;#34;Increment&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">button.set_onclick(||
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> text.set_text(&amp;#34;Count: \(count)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">stack.add_child(button)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>rather than writing &lt;strong>declarative&lt;/strong> and possibly &lt;strong>reactive&lt;/strong> code that programmer always dreams of, like this.&lt;sup id="fnref1:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">struct AppState {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> count: i32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">VStack {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Text(&amp;#34;count: \(state.count)&amp;#34;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Button(&amp;#34;Increment&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> state.count += 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>That&amp;rsquo;s why Flutter seems like a silver-bullet for developing apps:&lt;/p>
&lt;ul>
&lt;li>It is declarative and reactive in nature.&lt;/li>
&lt;li>It is truly cross-platform for making all of desktop, mobile, and web apps.&lt;/li>
&lt;/ul>
&lt;p>Though some people don&amp;rsquo;t like Flutter because it introduces another new and unfamiliar language as well as extra VM burden, which is likely the result of technical bureaucracy.&lt;/p>
&lt;p>The real problem of Flutter lies in the compatibility with existing ecosystems, as people are inclined to reuse existing resources and sticking to old but mature apps. And programming language matters for the same reason.&lt;/p>
&lt;p>And it also explains why the JavaScript version of Flutter was tried by some gifted and insightful people. But it failed as Flutter itself is rapidly changing its internals so that it won&amp;rsquo;t catch up. Thankfully, as all work pays off, it gave birth to the &lt;a href="https://github.com/openkraken/kraken">Kraken&lt;/a> framework, which allows coders to write HTML, and uses Flutter as the basis for cross-platform rendering.&lt;/p>
&lt;p>Wait&amp;hellip; What? Writing HTML again in non-web frameworks&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>?&lt;/p>
&lt;h2 id="design-to-code">Design-to-Code&lt;/h2>
&lt;p>No, no more writing HTML!&lt;/p>
&lt;p>Still, we have to admit that HTML+CSS is a good combination to represent UI, as&lt;/p>
&lt;ul>
&lt;li>HTML is responsible for the structure of the content,&lt;/li>
&lt;li>and CSS is individually responsible for the style of the content.&lt;/li>
&lt;/ul>
&lt;p>So that structure and style are de-coupled, which is good for engineering. The premise is that the engineering is necessary, however.&lt;/p>
&lt;p>In practice, the engineering of UI is sometimes meaningless and unnecessary. Suppose we already have a high-fidelity design prototype given by designers, and what coders need to do next is&lt;/p>
&lt;ol>
&lt;li>Re-implement the design prototype using code, which is HTML+CSS stuff in 99% cases.&lt;/li>
&lt;li>Add business logic to the UI he or she just re-implemented.&lt;/li>
&lt;/ol>
&lt;p>The first part is always the source of pain. It has plenty of details. It is time-consuming. It needs discussions with designers, back-and-forth. The communication cost is expensive. If the design updates, the code needs update too, and maybe another costly discussion is needed.&lt;/p>
&lt;p>And not to mention that, this kind of job is usually seen as low-ended, and thus the so-called front-end programmer is usually looked down upon by other non-front-end programmers.&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Some clever people came out of the solution of &lt;strong>Design-to-Code&lt;/strong> using compiler, or more specifically, the transpiler technique, which turns the whole high-fidelity design into machine-generated HTML+CSS code.&lt;/p>
&lt;p>It sounds adorable, but it is catering for PMs and designers, rather than developers. The nasty intrinsics include but is not limited to&lt;/p>
&lt;ul>
&lt;li>The generated code is ugly, or at least not conformed to current coding style.&lt;/li>
&lt;li>The integration of generated code is troublesome. What if it depends another 3rd-party library? What if the generated code got updated and whole chunk of changes is thrown to the version control system?&lt;/li>
&lt;li>The design tool like Sketch or Figma, is always more visually-capable than HTML+CSS for advanced visual effects, thus sometimes the generated code could not produce exactly the same UI of design prototype, and some patches are definitely needed. What if the generated code got updated and the patches won&amp;rsquo;t apply any more?&lt;/li>
&lt;/ul>
&lt;p>All in all, the Design-to-Code is not a good technical solution from coder&amp;rsquo;s perspective. Now let&amp;rsquo;s look what &lt;strong>Design-as-Code&lt;/strong> is.&lt;/p>
&lt;h2 id="design-as-code">Design-as-Code&lt;/h2>
&lt;p>In a Design-as-Code solution, no more HTML needs to be written, or generated. Even HTML itself does not exist.&lt;/p>
&lt;p>Because the design just replaces the role of HTML+CSS, so that design is just code.&lt;/p>
&lt;p>The obvious advantage is that the designing and developing of graphical UI needs to be done only once, because two things is actually one thing. And consequently less discussions are needed, which make both sides happier.&lt;/p>
&lt;p>As for developer, he or she is able to build business logic directly on the design prototype, which is then runnable by VGG engine as a whole, like a real application. This will save a lot of duplicated work so as to increase the work efficiency not only for developer but also for the whole team.&lt;/p>
&lt;p>The concept of &lt;em>Design-as-Code&lt;/em> is simple, however, it faces many challenges, including those in compiler, programming languages and computer graphics, and the last of which is where the name of VGG came from. VGG is short for &lt;em>Very Good Graphics&lt;/em>, because it is initially just a design rendering engine. As it develops, more and more interesting ideas and experiments are carried out in the engine, and it turns out to be a brand-new framework for developing interactive applications.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>In this post, we have discussed about the Web technologies, platform-specific frameworks, cross-platform frameworks, the Design-to-Code solution as well as the Design-as-Code concept.&lt;/p>
&lt;p>We proposed Design-as-Code concept for escaping from the HTML world, and introduced VGG as a brand-new engine and framework of D-a-C for developing interactive applications. But VGG is not finished yet, as many technical challenges needs to be overcome first.&lt;/p>
&lt;p>This post is just an introduction, and more details about VGG engine will be discussed in later posts. If you have interests, please keep an eye our official &lt;a href="https://blog.verygoodgraphics.com/">blog&lt;/a> and our open-sourced version of VGG &lt;a href="https://github.com/verygoodgraphics/vgg_runtime">engine&lt;/a>.&lt;/p>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>Sounds like Java right? But for this time, it&amp;rsquo;s not about programming languages, but about GUI frameworks.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>Here writing HTML actually means writing HTML+CSS.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>Actually the trend started more earlier with the advent of Web 2.0 and AJAX technology, but those made are more of web-site than web-app, like Facebook.&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>Let&amp;rsquo;s take the number of NPM packages for example, and we will see.&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5">
&lt;p>Code samples taken from Raph Levien&amp;rsquo;s &lt;a href="https://raphlinus.github.io/ui/druid/2019/11/22/reactive-ui.html">&lt;em>Towards a unified theory of reactive UI&lt;/em>&lt;/a>&amp;#160;&lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&amp;#160;&lt;a href="#fnref1:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6">
&lt;p>But there is Qt Designer that will do the dirty work for Qt developers.&amp;#160;&lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7">
&lt;p>Similar work is done in &lt;a href="https://reactnative.dev/">React Native&lt;/a>, which allows coding in React but rendering with native system widgets.&amp;#160;&lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8">
&lt;p>One evidence is that front-end programmer gets lower salary standard. The FE programmers always come and go, but good FE programmer is rare and is eagerly demanded by the market, which is really weird.&amp;#160;&lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>